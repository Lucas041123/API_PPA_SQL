# .github/workflows/ci-cd-pipeline.yml

name: CI/CD Pipeline - API Plataforma Profissional

# 1. GATILHOS (Triggers)
# Dispara o workflow em pushes ou Pull Requests para a branch 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ===================================================================
  # JOB 1: BUILD E TESTES AUTOMATIZADOS
  # ===================================================================
  build-and-test:
    name: Build, Test e Package
    runs-on: ubuntu-latest # Usa uma máquina virtual Linux

    steps:
      # 1. Baixa o código do repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configura o ambiente Java 17 (definido no seu pom.xml)
      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17' #
          distribution: 'temurin'
          cache: 'maven' # Ativa o cache para as dependências do Maven

      # 3. Garante que o Maven Wrapper (mvnw) é executável
      - name: Tornar o Maven Wrapper executável
        run: chmod +x mvnw

      # 4. Executa o build e os testes
      # O comando 'install' compila, executa os testes (ex: ApiApplicationTests) e empacota o .jar
      - name: Build com Maven Wrapper
        run: ./mvnw clean install #

      # 5. Salva os relatórios de teste (para "Relatórios de execução")
      - name: Upload dos Relatórios de Teste
        if: always() # Executa mesmo se o passo anterior falhar, para podermos ver o log de erro
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-de-teste
          path: target/surefire-reports/

      # 6. Salva o .jar final (para o job de Deploy)
      - name: Upload do Artefato da Aplicação (.jar)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar # Pega o .jar gerado (ex: api-0.0.1-SNAPSHOT.jar)

  # ===================================================================
  # JOB 2: DEPLOY AUTOMATIZADO + INTEGRAÇÃO ORACLE
  # ===================================================================
  deploy-and-migrate:
    name: Deploy e Migração do Banco
    runs-on: ubuntu-latest

    # Dependência: Só executa se o 'build-and-test' for bem-sucedido
    needs: build-and-test

    # Condição: Só executa em 'push' direto na 'main', não em Pull Requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # 1. Download do .jar salvo pelo job anterior
      - name: Download do Artefato da Aplicação (.jar)
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      # 2. Download do código (precisamos do script SQL)
      - name: Checkout do código
        uses: actions/checkout@v4

      # 3. INTEGRAÇÃO ORACLE: Executa o script SQL (SQL_PPA_2.sql)
      # Esta action usa o SQL*Plus (cliente Oracle) para se conectar e rodar o script
      - name: Executar Migração do Banco Oracle
        uses: oracle-actions/run-sqlplus-action@v1
        with:
          # Usamos "GitHub Secrets" para as credenciais. NUNCA as coloque direto no YAML!
          username: ${{ secrets.ORACLE_USER }}
          password: ${{ secrets.ORACLE_PASSWORD }}
          connect_string: ${{ secrets.ORACLE_CONNECT_STRING }} # oracle.fiap.com.br:1521/ORCL
          sql_script: SQL_PPA_2.sql

      # 4. DEPLOY DA APLICAÇÃO: Copia o .jar para seu servidor
      # Este é um exemplo usando 'scp' (Secure Copy via SSH).
      - name: Deploy para Servidor via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }} # IP ou DNS do seu servidor de deploy
          username: ${{ secrets.DEPLOY_USER }} # Usuário SSH (ex: 'admin', 'ubuntu')
          key: ${{ secrets.DEPLOY_KEY }} # Sua chave privada SSH (também como um Secret)
          port: 22 # Porta SSH
          source: "target/*.jar" # O .jar que baixamos
          target: "/home/admin/api" # Pasta de destino no servidor

      # 5. (Opcional) Reinicia a aplicação no servidor
      - name: Reiniciar Serviço da API no Servidor
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            # Exemplo de comando para reiniciar um serviço systemd
            # sudo systemctl restart minha-api-spring.service
            
            # Ou simplesmente rodar o java (exemplo simples, não ideal para produção)
            pkill java # Mata o processo java antigo
            nohup java -jar /home/admin/api/*.jar > /dev/null 2>&1 & # Inicia o novo