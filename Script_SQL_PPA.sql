-- Apaga as tabelas se já existirem (para facilitar a recriação durante os testes)
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE usuario_habilidades';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE posts';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE vagas';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE forums';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/
BEGIN
   EXECUTE IMMEDIATE 'DROP TABLE usuarios';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -942 THEN
         RAISE;
      END IF;
END;
/

-- Tabela de Usuários
CREATE TABLE usuarios (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(255) NOT NULL,
    email VARCHAR2(255) NOT NULL UNIQUE,
    senha VARCHAR2(255) NOT NULL,
    empresa VARCHAR2(255),
    bio CLOB,
    ativo NUMBER(1) DEFAULT 1 NOT NULL
);

-- Tabela de Habilidades (associada a Usuarios)
CREATE TABLE usuario_habilidades (
    usuario_id NUMBER NOT NULL,
    habilidade VARCHAR2(255) NOT NULL,
    CONSTRAINT fk_habilidades_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
);

-- Tabela de Vagas
CREATE TABLE vagas (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(255) NOT NULL,
    localizacao VARCHAR2(255),
    descricao CLOB,
    ativa NUMBER(1) DEFAULT 1 NOT NULL
);

-- Tabela de Fóruns
CREATE TABLE forums (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(255) NOT NULL UNIQUE,
    descricao VARCHAR2(1000)
);

-- Tabela de Posts
CREATE TABLE posts (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo VARCHAR2(255),
    conteudo CLOB,
    data_criacao TIMESTAMP DEFAULT SYSTIMESTAMP,
    usuario_id NUMBER,
    forum_id NUMBER,
    CONSTRAINT fk_post_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id),
    CONSTRAINT fk_post_forum FOREIGN KEY (forum_id) REFERENCES forums(id)
);

-- Inserir Usuários
-- Nota: As senhas aqui são exemplos.
INSERT INTO usuarios (nome, email, senha, empresa, bio, ativo)
VALUES ('TechNomadX', 'joao.silva@fiap.com.br', '$2a$10$3gU.x.q.s.C1g5.Yc.Z.p.Q.t.u.E.1.j.A.c.Q.f.Z.o.O.e', 'FIAP', 'Desenvolvedor focado em mobile e análise de dados.', 1);

INSERT INTO usuarios (nome, email, senha, empresa, bio, ativo)
VALUES ('OracleGuru', 'ana.costa@email.com', '$2a$10$abcdefghijklmnopqrstuvwxyzABCDEF1', 'Oracle', 'Especialista em bancos de dados e PL/SQL.', 1);

-- Inserir Habilidades
INSERT INTO usuario_habilidades (usuario_id, habilidade) VALUES (1, 'Flutter');
INSERT INTO usuario_habilidades (usuario_id, habilidade) VALUES (1, 'SQL');
INSERT INTO usuario_habilidades (usuario_id, habilidade) VALUES (2, 'Oracle');
INSERT INTO usuario_habilidades (usuario_id, habilidade) VALUES (2, 'PL/SQL');

-- Inserir Fóruns
INSERT INTO forums (nome, descricao) VALUES ('Desenvolvimento Mobile', 'Discussões sobre Flutter, React Native e outras tecnologias mobile.');
INSERT INTO forums (nome, descricao) VALUES ('Banco de Dados', 'Tudo sobre Oracle, PostgreSQL, SQL e NoSQL.');

-- Inserir Vaga
INSERT INTO vagas (nome, localizacao, descricao, ativa) VALUES ('DBA Oracle Pleno', 'Remoto', 'Procuramos um DBA com experiência em otimização de queries e PL/SQL.', 1);

-- Inserir Post
-- Supondo que o usuário 'OracleGuru' tem ID 2 e o fórum 'Banco de Dados' tem ID 2
INSERT INTO posts (titulo, conteudo, usuario_id, forum_id)
VALUES ('Primeiros Passos com PL/SQL', 'Este post é um guia para iniciantes em PL/SQL...', 2, 2);


-- Confirma todas as transações pendentes
COMMIT;


CREATE OR REPLACE FUNCTION calcular_engajamento_usuario(
    p_usuario_id IN NUMBER
) RETURN NUMBER IS
    v_total_posts NUMBER;
BEGIN
    -- Conta o número de posts para o ID do usuário fornecido
    SELECT COUNT(*)
    INTO v_total_posts
    FROM posts
    WHERE usuario_id = p_usuario_id;

    RETURN v_total_posts;
EXCEPTION
    -- Tratamento de exceção para casos onde o usuário pode não ter posts
    WHEN NO_DATA_FOUND THEN
        RETURN 0;
    -- Tratamento para outros erros inesperados
    WHEN OTHERS THEN
        -- Em um ambiente de produção, seria ideal logar o erro
        RETURN -1;
END;
/

-- Supondo que o usuário 'OracleGuru' (ID 2) tem um post, o resultado será 1.
-- Supondo que o usuário 'TechNomadX' (ID 1) não tem posts, o resultado será 0.
SELECT nome, email, calcular_engajamento_usuario(id) AS score_engajamento FROM usuarios;

CREATE OR REPLACE FUNCTION formatar_habilidades_usuario(
    p_usuario_id IN NUMBER
) RETURN VARCHAR2 IS
    v_lista_habilidades VARCHAR2(4000);
BEGIN
    -- Agrega todas as habilidades em uma única string, ordenadas alfabeticamente
    SELECT LISTAGG(habilidade, ', ') WITHIN GROUP (ORDER BY habilidade)
    INTO v_lista_habilidades
    FROM usuario_habilidades
    WHERE usuario_id = p_usuario_id;

    RETURN v_lista_habilidades;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Nenhuma habilidade cadastrada';
    WHEN OTHERS THEN
        RETURN 'Erro ao buscar habilidades';
END;
/


-- O resultado para o usuário 1 será "Flutter, SQL"
-- O resultado para o usuário 2 será "Oracle, PL/SQL"
SELECT nome, formatar_habilidades_usuario(id) AS habilidades FROM usuarios;

CREATE OR REPLACE PROCEDURE gerar_relatorio_atividade_forum IS
    -- Declaração do CURSOR para buscar todos os fóruns
    CURSOR c_forums IS
        SELECT id, nome FROM forums ORDER BY nome;

    v_total_posts NUMBER;
    v_forum_id forums.id%TYPE;
    v_forum_nome forums.nome%TYPE;
BEGIN
    -- Habilita a saída no console do SQL Developer (aba "Saída de Script")
    DBMS_OUTPUT.PUT_LINE('--- Relatorio de Atividade dos Foruns ---');
    DBMS_OUTPUT.PUT_LINE('-----------------------------------------');

    -- Abre o cursor para iniciar a leitura
    OPEN c_forums;

    -- Inicia o LOOP para percorrer cada registro do cursor
    LOOP
        -- Busca os dados da linha atual do cursor para as variáveis
        FETCH c_forums INTO v_forum_id, v_forum_nome;
        -- Sai do loop se não houver mais linhas
        EXIT WHEN c_forums%NOTFOUND;

        -- Para cada fórum, conta o número de posts associados a ele
        SELECT COUNT(*) INTO v_total_posts FROM posts WHERE forum_id = v_forum_id;

        -- Exibe o resultado formatado
        DBMS_OUTPUT.PUT_LINE('Forum: ' || v_forum_nome || ' | Total de Posts: ' || v_total_posts);

    END LOOP;

    -- Fecha o cursor para liberar os recursos
    CLOSE c_forums;
    DBMS_OUTPUT.PUT_LINE('-----------------------------------------');
    DBMS_OUTPUT.PUT_LINE('Relatorio gerado com sucesso.');

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Ocorreu um erro inesperado ao gerar o relatorio: ' || SQLERRM);
END;
/

SET SERVEROUTPUT ON;

BEGIN
    gerar_relatorio_atividade_forum;
END;
/

CREATE OR REPLACE PROCEDURE registrar_novo_post (
    p_titulo      IN posts.titulo%TYPE,
    p_conteudo    IN posts.conteudo%TYPE,
    p_usuario_id  IN posts.usuario_id%TYPE,
    p_forum_id    IN posts.forum_id%TYPE,
    p_post_id_out OUT posts.id%TYPE -- Parâmetro de saída com o ID do novo post
) IS
BEGIN
    -- Insere o novo post na tabela
    INSERT INTO posts (titulo, conteudo, usuario_id, forum_id)
    VALUES (p_titulo, p_conteudo, p_usuario_id, p_forum_id)
    -- Retorna o ID gerado para a variável de saída
    RETURNING id INTO p_post_id_out;

    -- Confirma a transação
    COMMIT;

EXCEPTION
    -- Se ocorrer qualquer erro, desfaz a transação
    WHEN OTHERS THEN
        ROLLBACK;
        -- Propaga o erro para a aplicação que chamou a procedure
        RAISE;
END;
/


